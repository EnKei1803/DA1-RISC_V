module ADDER_4bits (
    input  [3:0] A, B,
    output [3:0] Sum,
    output Cout
);
    logic [4:1] G, P;   // Generate and Propagate signals
    logic [4:1] C;      // Carry signals

    // **Pre-processing stage:** Compute Generate (G) and Propagate (P)
    assign G = A & B;    // Generate
    assign P = A ^ B;    // Propagate

    // **Prefix Computation Stage (Carry Calculation)**

    // Level 1 (Gray and Black Cells)
    logic [4:3] G1, P1; // Intermediary values

    // Compute carry for first bit (Gray Cell)
    assign C[1] = G[1];  

    // Compute intermediate carry values using Black Cells
    BLACK_CELL BLACK_CELL_1_2 (P[1], G[1], P[2], G[2], P1[2], G1[2]);
    BLACK_CELL BLACK_CELL_1_3 (P[2], G[2], P[3], G[3], P1[3], G1[3]);
    BLACK_CELL BLACK_CELL_1_4 (P[3], G[3], P[4], G[4], P1[4], G1[4]);

    // Level 2 (Final Carry)
    GRAY_CELL GRAY_CELL_3 (C[1], P1[3], G1[3], C[3]);
    GRAY_CELL GRAY_CELL_4 (C[2], P1[4], G1[4], C[4]);

    // **Post-processing stage:** Compute Sum
    assign Sum = C[3:0] ^ P[4:1];

    // Compute final carry out
    assign Cout = C[4];

endmodule
